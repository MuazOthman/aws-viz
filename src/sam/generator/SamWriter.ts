import { Application, Component } from '../../diagram/model';
import { yamlDump, yamlParse } from 'yaml-cfn';
import { writeFileSync, existsSync, readFileSync } from 'fs';
import isEqual from 'lodash.isequal';
import { SamWriterOptions } from './SamWriterOptions';

export abstract class SamWriter {
  public static NodeJSLambdaXRayTracingLayer = {
    'Fn::Sub': 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:16',
  };
  protected _model: any = {};
  protected readonly _options: SamWriterOptions;
  constructor(options?: SamWriterOptions) {
    this._options = options ?? { defaultRuntime: 'nodejs14.x' };
    if (!this._options.defaultTableProperties) {
      this._options.defaultTableProperties = {
        AttributeDefinitions: [
          {
            AttributeName: 'PK',
            AttributeType: 'S',
          },
          {
            AttributeName: 'SK',
            AttributeType: 'S',
          },
        ],
        KeySchema: [
          {
            AttributeName: 'PK',
            KeyType: 'HASH',
          },
          {
            AttributeName: 'SK',
            KeyType: 'RANGE',
          },
        ],
        BillingMode: 'PAY_PER_REQUEST',
        SSESpecification: {
          SSEEnabled: true,
        },
      };
    }
  }

  protected addEnvironmentVariable(functionName: string, variableName: string, variableValue: any): void {
    this._model.Resources[functionName].Properties.Environment.Variables[variableName] = variableValue;
  }
  protected addPolicyToFunction(functionName: string, policy: any): void {
    const hasPolicy = this._model.Resources[functionName].Properties.Policies.some((p) => isEqual(p, policy));
    if (!hasPolicy) {
      this._model.Resources[functionName].Properties.Policies.push(policy);
    }
  }

  protected abstract handleFunction(f: Component): void;
  protected abstract handleTopic(f: Component): void;
  protected abstract handleBucket(f: Component): void;
  protected abstract handleTable(t: Component): void;
  protected abstract handleEventBus(t: Component): void;
  protected abstract handleQueue(t: Component): void;

  protected initModel(): void {
    this._model = {
      AWSTemplateFormatVersion: '2010-09-09',
      Transform: 'AWS::Serverless-2016-10-31',
      Description: 'SAM template generated by aws-viz.',
      Globals: {
        Function: {
          Runtime: this._options.defaultRuntime ?? 'nodejs14.x',
          Timeout: 29,
          MemorySize: 128,
          Environment: {
            Variables: {
              AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1,
              EnvironmentName: { Ref: 'EnvironmentName' },
            },
          },
        },
      },
      Resources: {},
      Parameters: {
        EnvironmentName: {
          Type: 'String',
          Description: 'The Environment Name',
        },
      },
    };
    if (this._options.additionalGlobalEnvironmentVariables) {
      this._model.Globals.Function.Environment.Variables = {
        ...this._model.Globals.Function.Environment.Variables,
        ...this._options.additionalGlobalEnvironmentVariables,
      };
    }
    if (this._options.lambdaXRayTracingLayer) {
      this._model.Globals.Function.Tracing = 'Active';
      this._model.Globals.Function.Layers = [this._options.lambdaXRayTracingLayer];
    }
  }

  protected fixModel(app: Application): void {
    const hasApiEndpoint = app.components.some((c) => c.type === 'ApiEndpoint');
    if (!this._model.Resources) {
      this._model.Resources = {};
    }

    // add HttpApi resource if needed
    if (hasApiEndpoint) {
      this._model.Resources.HttpApiResource = {
        Type: 'AWS::Serverless::HttpApi',
        Properties: {},
      };

      if (!this._options.isCorsDisabled) {
        this._model.Resources.HttpApiResource.Properties.CorsConfiguration = {
          AllowHeaders: ['*'],
          AllowMethods: ['GET', 'POST', 'DELETE', 'PUT', 'PATCH'],
          AllowOrigins: [{ Ref: 'AllowedDomain' }],
        };
      }

      this._model.Outputs = {
        RootUrl: {
          Description: 'Root URL for API',
          Value: {
            'Fn::Sub': 'https://${HttpApiResource}.execute-api.${AWS::Region}.amazonaws.com',
          },
        },
      };
    }
  }

  protected buildSamObject(app: Application): void {
    if (Object.keys(this._model).length === 0) {
      this.initModel();
    }

    this.fixModel(app);

    for (let i = 0; i < app.components.length; i++) {
      const component = app.components[i];
      switch (component.type) {
        case 'Browser':
          // nothing
          break;
        case 'Bucket':
          this.handleBucket(component);
          break;
        case 'EventBus':
          this.handleEventBus(component);
          break;
        case 'Function':
          this.handleFunction(component);
          break;
        case 'Queue':
          this.handleQueue(component);
          break;
        case 'ApiEndpoint':
          // nothing
          break;
        case 'Schedule':
          // nothing
          break;
        case 'Table':
          this.handleTable(component);
          break;
        case 'Topic':
          this.handleTopic(component);
          break;
      }
    }
  }

  public generateSamFile(app: Application, file = 'template-gen.yaml'): void {
    if (!app.isCompiled) app.compile();
    if (existsSync(file)) {
      this._model = yamlParse(readFileSync(file, 'utf-8')) ?? {};
    }
    this.buildSamObject(app);
    const yml = yamlDump(this._model);
    writeFileSync(file, yml);
  }
}
